!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Address	Address.cpp	/^    Address::Address()$/;"	f	class:Socket::Address
Address	Address.cpp	/^    Address::Address(Ip ip, Port port)$/;"	f	class:Socket::Address
Address	Address.cpp	/^    Address::Address(Port port)$/;"	f	class:Socket::Address
Address	Address.cpp	/^    Address::Address(const Address &address)$/;"	f	class:Socket::Address
Address	Address.cpp	/^    Address::Address(struct sockaddr_in address)$/;"	f	class:Socket::Address
Address	Socket.hpp	/^    struct Address : protected sockaddr_in$/;"	s	namespace:Socket
CommonSocket	CommonSocket.cpp	/^    CommonSocket::CommonSocket(int socket_type)$/;"	f	class:Socket::CommonSocket
CommonSocket	CommonSocket.cpp	/^    CommonSocket::CommonSocket(void)$/;"	f	class:Socket::CommonSocket
CommonSocket	Socket.hpp	/^    class CommonSocket$/;"	c	namespace:Socket
Datagram	Socket.hpp	/^    struct Datagram$/;"	s	namespace:Socket
IP	examples/tcp_sender.cpp	6;"	d	file:
Ip	Socket.hpp	/^    typedef string Ip;$/;"	t	namespace:Socket
PORT	examples/tcp_sender.cpp	7;"	d	file:
Port	Socket.hpp	/^    typedef unsigned int Port;$/;"	t	namespace:Socket
SOCKET_MAX_BUFFER_LEN	Socket.hpp	48;"	d
Socket	Address.cpp	/^namespace Socket$/;"	n	file:
Socket	CommonSocket.cpp	/^namespace Socket$/;"	n	file:
Socket	Datagram.cpp	/^namespace Socket$/;"	n	file:
Socket	Socket.hpp	/^namespace Socket$/;"	n
Socket	SocketException.cpp	/^namespace Socket$/;"	n	file:
Socket	TCP.cpp	/^namespace Socket$/;"	n	file:
Socket	UDP.cpp	/^namespace Socket$/;"	n	file:
SocketException	Socket.hpp	/^    class SocketException : public exception$/;"	c	namespace:Socket
SocketException	SocketException.cpp	/^    SocketException::SocketException(const string &message)$/;"	f	class:Socket::SocketException
SocketId	Socket.hpp	/^    typedef int SocketId;$/;"	t	namespace:Socket
TCP	Socket.hpp	/^    class TCP : public CommonSocket$/;"	c	namespace:Socket
TCP	TCP.cpp	/^    TCP::TCP(const TCP &tcp) : CommonSocket()$/;"	f	class:Socket::TCP
TCP	TCP.cpp	/^    TCP::TCP(void) : CommonSocket(SOCK_STREAM)$/;"	f	class:Socket::TCP
UDP	Socket.hpp	/^    class UDP : public CommonSocket$/;"	c	namespace:Socket
UDP	UDP.cpp	/^    UDP::UDP(const UDP &udp) : CommonSocket()$/;"	f	class:Socket::UDP
UDP	UDP.cpp	/^    UDP::UDP(void) : CommonSocket(SOCK_DGRAM)$/;"	f	class:Socket::UDP
WINDOWS	Socket.hpp	36;"	d
_ADDRESS_CPP_	Address.cpp	26;"	d	file:
_COMMON_SOCKET_CPP_	CommonSocket.cpp	26;"	d	file:
_DATAGRAM_CPP_	Datagram.cpp	26;"	d	file:
_SOCKETEXCEPTION_CPP_	SocketException.cpp	26;"	d	file:
_SOCKET_HPP_	Socket.hpp	26;"	d
_TCP_CPP_	TCP.cpp	26;"	d	file:
_UDP_CPP_	UDP.cpp	26;"	d	file:
_address	Address.cpp	/^    void Address::_address(Ip ip, Port port)$/;"	f	class:Socket::Address
_address	Socket.hpp	/^        Address _address;$/;"	m	class:Socket::TCP
_binded	Socket.hpp	/^        bool _binded;$/;"	m	class:Socket::CommonSocket
_error	Socket.hpp	/^        string _error;$/;"	m	class:Socket::SocketException
_num_sockets	CommonSocket.cpp	/^    unsigned int CommonSocket::_num_sockets = 0;$/;"	m	class:Socket::CommonSocket	file:
_num_sockets	Socket.hpp	/^        static unsigned int _num_sockets;$/;"	m	class:Socket::CommonSocket
_opened	Socket.hpp	/^        bool _opened;$/;"	m	class:Socket::CommonSocket
_socket	CommonSocket.cpp	/^    void CommonSocket::_socket(void)$/;"	f	class:Socket::CommonSocket
_socket_id	Socket.hpp	/^        SocketId _socket_id;$/;"	m	class:Socket::CommonSocket
_socket_type	Socket.hpp	/^        int _socket_type;$/;"	m	class:Socket::CommonSocket
accept_client	TCP.cpp	/^    TCP TCP::accept_client(void)$/;"	f	class:Socket::TCP
address	Socket.hpp	/^        Address address;$/;"	m	struct:Socket::Datagram
address	TCP.cpp	/^    Address TCP::address(void)$/;"	f	class:Socket::TCP
close	CommonSocket.cpp	/^    void CommonSocket::close(void)$/;"	f	class:Socket::CommonSocket
connect_to	TCP.cpp	/^    void TCP::connect_to(Address address)$/;"	f	class:Socket::TCP
data	Socket.hpp	/^        DataType data;$/;"	m	struct:Socket::Datagram
ip	Address.cpp	/^    Ip Address::ip(Ip ip)$/;"	f	class:Socket::Address
ip	Address.cpp	/^    Ip Address::ip(void)$/;"	f	class:Socket::Address
ip	TCP.cpp	/^    Ip TCP::ip(void)$/;"	f	class:Socket::TCP
listen_on_port	CommonSocket.cpp	/^    void CommonSocket::listen_on_port(Port port)$/;"	f	class:Socket::CommonSocket
listen_on_port	TCP.cpp	/^    void TCP::listen_on_port(Port port, unsigned int listeners = 1)$/;"	f	class:Socket::TCP
main	examples/tcp_receiver.cpp	/^int main(void)$/;"	f
main	examples/tcp_sender.cpp	/^int main(void)$/;"	f
main	examples/udp_receiver.cpp	/^int main(void)$/;"	f
main	examples/udp_sender.cpp	/^int main(void)$/;"	f
open	CommonSocket.cpp	/^    void CommonSocket::open(void)$/;"	f	class:Socket::CommonSocket
operator <<	Address.cpp	/^    ostream& operator<< (ostream &out, Address &address)$/;"	f	namespace:Socket
operator <<	SocketException.cpp	/^    ostream& operator<< (ostream &out, SocketException &e)$/;"	f	namespace:Socket
operator =	Datagram.cpp	/^    void Datagram<DataType>::operator= (const Datagram<T> &datagram)$/;"	f	class:Socket::Datagram
port	Address.cpp	/^    Port Address::port(Port port)$/;"	f	class:Socket::Address
port	Address.cpp	/^    Port Address::port(void)$/;"	f	class:Socket::Address
port	TCP.cpp	/^    Port TCP::port(void)$/;"	f	class:Socket::TCP
prova	examples/udp_receiver.cpp	/^struct prova$/;"	s	file:
prova	examples/udp_sender.cpp	/^struct prova$/;"	s	file:
receive	TCP.cpp	/^    int TCP::receive(T* buffer, size_t len)$/;"	f	class:Socket::TCP
receive	UDP.cpp	/^    Datagram<T*> UDP::receive(T *buffer, size_t len = SOCKET_MAX_BUFFER_LEN)$/;"	f	class:Socket::UDP
receive	UDP.cpp	/^    Datagram<T> UDP::receive(void)$/;"	f	class:Socket::UDP
receive	UDP.cpp	/^    Datagram<T[N]> UDP::receive(size_t len = N)$/;"	f	class:Socket::UDP
receive	UDP.cpp	/^    Datagram<string> UDP::receive<string>(void)$/;"	f	class:Socket::UDP
receive	UDP.cpp	/^    Datagram<vector<T> > UDP::receive(size_t len)$/;"	f	class:Socket::UDP
receive	UDP.cpp	/^    int UDP::receive(Address *address, T *data, size_t len, unsigned int *received_elements)$/;"	f	class:Socket::UDP
receive_file	TCP.cpp	/^    void TCP::receive_file(string file_name)$/;"	f	class:Socket::TCP
received_bytes	Socket.hpp	/^        unsigned int received_bytes;$/;"	m	struct:Socket::Datagram
received_elements	Socket.hpp	/^        unsigned int received_elements;$/;"	m	struct:Socket::Datagram
send	TCP.cpp	/^    int TCP::send(const T* buffer, size_t len)$/;"	f	class:Socket::TCP
send	UDP.cpp	/^    int UDP::send(Address address, T data)$/;"	f	class:Socket::UDP
send	UDP.cpp	/^    int UDP::send(Address address, const T *data, size_t len)$/;"	f	class:Socket::UDP
send	UDP.cpp	/^    int UDP::send(Address address, vector<T> data)$/;"	f	class:Socket::UDP
send	UDP.cpp	/^    int UDP::send(Ip ip, Port port, T data)$/;"	f	class:Socket::UDP
send	UDP.cpp	/^    int UDP::send(Ip ip, Port port, const T *data, size_t len)$/;"	f	class:Socket::UDP
send	UDP.cpp	/^    int UDP::send(Ip ip, Port port, vector<T> data)$/;"	f	class:Socket::UDP
send	UDP.cpp	/^    int UDP::send<string>(Address address, string data)$/;"	f	class:Socket::UDP
send	UDP.cpp	/^    int UDP::send<string>(Ip ip, Port port, string data)$/;"	f	class:Socket::UDP
send_file	TCP.cpp	/^    void TCP::send_file(string file_name)$/;"	f	class:Socket::TCP
socklen_t	Socket.hpp	/^    typedef unsigned int socklen_t;$/;"	t	namespace:Socket
something	examples/udp_receiver.cpp	/^    int something;$/;"	m	struct:prova	file:
something	examples/udp_sender.cpp	/^    int something;$/;"	m	struct:prova	file:
somethingelse	examples/udp_receiver.cpp	/^    float somethingelse;$/;"	m	struct:prova	file:
somethingelse	examples/udp_sender.cpp	/^    float somethingelse;$/;"	m	struct:prova	file:
what	SocketException.cpp	/^    const char* SocketException::what() const throw()$/;"	f	class:Socket::SocketException
~CommonSocket	CommonSocket.cpp	/^    CommonSocket::~CommonSocket(void)$/;"	f	class:Socket::CommonSocket
~SocketException	SocketException.cpp	/^    SocketException::~SocketException() throw()$/;"	f	class:Socket::SocketException
